<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zylia's Blog]]></title>
  <link href="http://zylia.github.io/atom.xml" rel="self"/>
  <link href="http://zylia.github.io/"/>
  <updated>2015-03-18T16:25:15+08:00</updated>
  <id>http://zylia.github.io/</id>
  <author>
    <name><![CDATA[zylia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[系统调用perf_event_open的使用说明]]></title>
    <link href="http://zylia.github.io/blog/2015/03/18/perf-event-open/"/>
    <updated>2015-03-18T16:19:47+08:00</updated>
    <id>http://zylia.github.io/blog/2015/03/18/perf-event-open</id>
    <content type="html"><![CDATA[<p>perf_event_open是用来设置intel的性能监控。perf_event_open()返回一个文件描述符，可以在系统调用(read(2), mmap(2), prctl(2)等)中使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NUMA架构的程序性能分析工具MemProf]]></title>
    <link href="http://zylia.github.io/blog/2015/03/18/memprof/"/>
    <updated>2015-03-18T15:40:50+08:00</updated>
    <id>http://zylia.github.io/blog/2015/03/18/memprof</id>
    <content type="html"><![CDATA[<p>&ldquo;MemProf: a Memory Profiler for NUMA Multicore Systems&#8221;是发表在计算机系统领域顶级会议USENIX Annual Technical Conference(ATC &lsquo;14)上。作者提出了一个分析工具，能够建立线程和内存对象之间的交互信息，帮助程序员理解为什么和哪些内存对象是远端访问。</p>

<!-- more -->


<p>应用程序级别的优化技术有以下一些缺点；对于程序员来说很难决定一个给定的程序/工作集可以用哪些优化策略。我们需要知道线程和内存对象之间的交互信息，例如，在程序运行的任何时刻点知道哪些线程访问哪些内存对象，以及每次内存访问请求的发送和接受节点的详细信息。然而，现有的分析工具，例如OProfile，Linux Perf，VTune和Memphis都无法提供这些信息。这些工具有些能够提供全局静态内存对象的信息，但是这些对象只占据了所有远端内存访问的很小一部分比例。作者做实验发现这些全局静态内存对象只占用了少于4%的总远端访问次数。对于其他内存对象，现有的分析工具只提供了目标内存地址和触发该访问的程序指令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的虚拟内存管理(转载)]]></title>
    <link href="http://zylia.github.io/blog/2015/03/17/virtual-memory/"/>
    <updated>2015-03-17T10:32:30+08:00</updated>
    <id>http://zylia.github.io/blog/2015/03/17/virtual-memory</id>
    <content type="html"><![CDATA[<p>一个进程的虚拟地址空间主要由两个数据结来描述。一个是最高层次的：mm_struct，一个是较高层次的：vm_area_struct。
最高层次的mm_struct结构描述了一个进程的整个虚拟地址空间。较高层次的结构vm_area_struct描述了虚拟地址空间的一个区间（简称虚拟区）。
mm_struct定义在include/linux/mm_types.h中，其中的域抽象了进程的地址空间。其中：</p>

<!-- more -->


<p>[start_code,end_code)表示代码段的地址空间范围。  <br  />
[start_data,end_start)表示数据段的地址空间范围。  <br  />
[start_brk,brk)分别表示heap段的起始空间和当前的heap指针。  <br  />
[start_stack,end_stack)表示stack段的地址空间范围。  <br  />
mmap_base表示memory mapping段的起始地址。<strong>那为什么mmap段没有结束的地址呢？</strong></p>

<p>实验内容：在proc文件系统下，建立一个文件，每次向这个文件写入字符时，调用相应的虚拟内存处理函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>mtest_dump_vma_list():print each VMA of current process, we call this function ”listvma”
</span><span class='line'>mtest_find_vma():find the VMA of virtual address, we call this function “findvma”
</span><span class='line'>my_follow_page():according to page table, we calculate the physical page of the virtual address, we call this function ”findpage”
</span><span class='line'>mtest_write_val():write data on the specific address, we call this function “writeval”.
</span><span class='line'>*/
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/proc_fs.h&gt;
</span><span class='line'>#include &lt;linux/string.h&gt;
</span><span class='line'>#include &lt;linux/vmalloc.h&gt;
</span><span class='line'>#include &lt;asm/uaccess.h&gt;
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/slab.h&gt;
</span><span class='line'>#include &lt;linux/mm.h&gt;
</span><span class='line'>#include &lt;linux/vmalloc.h&gt;
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>/*
</span><span class='line'>how to write code to look at which visual areas do the process allocate
</span><span class='line'>*/
</span><span class='line'>
</span><span class='line'>static void mtest_dump_vma_list(void)
</span><span class='line'>{
</span><span class='line'>  struct mm_struct * mm = current-&gt;mm;
</span><span class='line'>  struct vm_area_struct *vma;
</span><span class='line'>  printk("The current process is %s\n",current-&gt;comm);
</span><span class='line'>  printk("mtest_dump_vma_list\n");
</span><span class='line'>  down_read(&mm-&gt;mmap_sem);
</span><span class='line'>  for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
</span><span class='line'>    printk("VMA 0x%lx-0x%lx ", vma-&gt;vm_start, vma-&gt;vm_end);
</span><span class='line'>    if (vma-&gt;vm_flags & VM_WRITE)
</span><span class='line'>      printk("WRITE ");
</span><span class='line'>    if (vma-&gt;vm_flags & VM_READ)
</span><span class='line'>      printk("READ ");
</span><span class='line'>    if (vma-&gt;vm_flags & VM_EXEC)
</span><span class='line'>      printk("EXEC ");
</span><span class='line'>    printk("\n");
</span><span class='line'>  }
</span><span class='line'>  up_read(&mm-&gt;mmap_sem);
</span><span class='line'>}
</span><span class='line'>/*
</span><span class='line'>if we know the specific virtual address, for example, 0x8049000. How do we find which VMA does this virtual address allocate?
</span><span class='line'>*/
</span><span class='line'>static void mtest_find_vma(unsigned long addr)
</span><span class='line'>{
</span><span class='line'>  struct vm_area_struct *vma;
</span><span class='line'>  struct mm_struct * mm = current-&gt;mm;
</span><span class='line'>  printk("mtest_find_vma\n");
</span><span class='line'>  down_read(&mm-&gt;mmap_sem);
</span><span class='line'>  vma = find_vma(mm, addr);
</span><span class='line'>  if (vma && addr &gt;= vma-&gt;vm_start) {
</span><span class='line'>    printk("found vma 0x%lx-0x%lx flag %lx for addr 0x%lx\n", vma-&gt;vm_start, vma-&gt;vm_end, vma-&gt;vm_flags, addr);
</span><span class='line'>  } else {
</span><span class='line'>    printk("no vma found for %lx\n", addr);
</span><span class='line'>  }
</span><span class='line'>  up_read(&mm-&gt;mmap_sem);
</span><span class='line'>}
</span><span class='line'>/*
</span><span class='line'>A physical page is described as struct page in the kernel.
</span><span class='line'>Given the virtual area VMA and the virtual address, find the physical page of this address.
</span><span class='line'>*/
</span><span class='line'>static struct page *my_follow_page(struct vm_area_struct *vma, unsigned long addr)
</span><span class='line'>{
</span><span class='line'>  pud_t *pud;
</span><span class='line'>  pmd_t *pmd;
</span><span class='line'>  pgd_t *pgd;
</span><span class='line'>  pte_t *pte;
</span><span class='line'>  spinlock_t *ptl;
</span><span class='line'>  struct page *page = NULL;
</span><span class='line'>  struct mm_struct *mm = vma-&gt;vm_mm;
</span><span class='line'>  pgd = pgd_offset(mm, addr);
</span><span class='line'>  if (pgd_none(*pgd) || unlikely(pgd_bad(*pgd))) {
</span><span class='line'>    goto out;
</span><span class='line'>  }
</span><span class='line'>  pud = pud_offset(pgd, addr);
</span><span class='line'>  if (pud_none(*pud) || unlikely(pud_bad(*pud)))
</span><span class='line'>    goto out;
</span><span class='line'>  pmd = pmd_offset(pud, addr);
</span><span class='line'>  if (pmd_none(*pmd) || unlikely(pmd_bad(*pmd))) {
</span><span class='line'>    goto out;
</span><span class='line'>  }
</span><span class='line'>  pte = pte_offset_map_lock(mm, pmd, addr, &ptl);
</span><span class='line'>  if (!pte)
</span><span class='line'>    goto out;
</span><span class='line'>  if (!pte_present(*pte))
</span><span class='line'>    goto unlock;
</span><span class='line'>  page = pfn_to_page(pte_pfn(*pte));
</span><span class='line'>  if (!page)
</span><span class='line'>    goto unlock;
</span><span class='line'>  get_page(page);
</span><span class='line'>unlock:
</span><span class='line'>  pte_unmap_unlock(pte, ptl);
</span><span class='line'>out:
</span><span class='line'>  return page;
</span><span class='line'>}
</span><span class='line'>/*
</span><span class='line'>According to the page table, calculate the physical page of the virtual address. We call this function "my_follow_page"
</span><span class='line'>*/
</span><span class='line'>static void mtest_find_page(unsigned long addr)
</span><span class='line'>{
</span><span class='line'>  struct vm_area_struct *vma;
</span><span class='line'>  struct mm_struct *mm = current-&gt;mm;
</span><span class='line'>  unsigned long kernel_addr;
</span><span class='line'>  struct page *page;
</span><span class='line'>  printk("mtest_write_val\n");
</span><span class='line'>  down_read(&mm-&gt;mmap_sem);
</span><span class='line'>  vma = find_vma(mm, addr);
</span><span class='line'>  page = my_follow_page(vma, addr);
</span><span class='line'>  if (!page)
</span><span class='line'>  {
</span><span class='line'>    printk("page not found for 0x%lx\n", addr);
</span><span class='line'>    goto out;
</span><span class='line'>  }
</span><span class='line'>  printk("page  found for 0x%lx\n", addr);
</span><span class='line'>  kernel_addr = (unsigned long)page_address(page);
</span><span class='line'>  kernel_addr += (addr&~PAGE_MASK);
</span><span class='line'>  printk("find 0x%lx to kernel address 0x%lx\n", addr, kernel_addr);
</span><span class='line'>out:
</span><span class='line'>  up_read(&mm-&gt;mmap_sem);
</span><span class='line'>}
</span><span class='line'>/*
</span><span class='line'>Whether you have the follow thought, write the data you want to the specific address?
</span><span class='line'>*/
</span><span class='line'>static void mtest_write_val(unsigned long addr, unsigned long val)
</span><span class='line'>{
</span><span class='line'>  struct vm_area_struct *vma;
</span><span class='line'>  struct mm_struct *mm = current-&gt;mm;
</span><span class='line'>  struct page *page;
</span><span class='line'>  unsigned long kernel_addr;
</span><span class='line'>  printk("mtest_write_val\n");
</span><span class='line'>  down_read(&mm-&gt;mmap_sem);
</span><span class='line'>  vma = find_vma(mm, addr);
</span><span class='line'>  if (vma && addr &gt;= vma-&gt;vm_start && (addr + sizeof(val)) &lt; vma-&gt;vm_end) {
</span><span class='line'>    if (!(vma-&gt;vm_flags & VM_WRITE)) {
</span><span class='line'>      printk("vma is not writable for 0x%lx\n", addr);
</span><span class='line'>      goto out;
</span><span class='line'>    }
</span><span class='line'>    page = my_follow_page(vma, addr);
</span><span class='line'>    if (!page) {
</span><span class='line'>      printk("page not found for 0x%lx\n", addr);
</span><span class='line'>      goto out;
</span><span class='line'>    }
</span><span class='line'>    kernel_addr = (unsigned long)page_address(page);
</span><span class='line'>    kernel_addr += (addr&~PAGE_MASK);
</span><span class='line'>    printk("write 0x%lx to address 0x%lx\n", val, kernel_addr);
</span><span class='line'>    *(unsigned long *)kernel_addr = val;
</span><span class='line'>    put_page(page);
</span><span class='line'>  } else {
</span><span class='line'>      printk("no vma found for %lx\n", addr);
</span><span class='line'>  }
</span><span class='line'>out:
</span><span class='line'>  up_read(&mm-&gt;mmap_sem);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static ssize_t mtest_write(struct file *file, const char __user * buffer, size_t count, loff_t *data)
</span><span class='line'>{
</span><span class='line'>  char buf[128];
</span><span class='line'>  unsigned long val, val2;
</span><span class='line'>  printk("mtest_write ........ \n");
</span><span class='line'>  if (count &gt; sizeof(buf))
</span><span class='line'>    return -EINVAL;
</span><span class='line'>  if (copy_from_user(buf, buffer, count))
</span><span class='line'>    return -EINVAL;
</span><span class='line'>  if (memcmp(buf, "listvma", 7) == 0)
</span><span class='line'>    mtest_dump_vma_list();
</span><span class='line'>  else if (memcmp(buf, "findvma", 7) == 0) {
</span><span class='line'>    if (sscanf(buf + 7, "%lx", &val) == 1) {
</span><span class='line'>      mtest_find_vma(val);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  else if (memcmp(buf, "findpage", 8) == 0) {
</span><span class='line'>    if (sscanf(buf + 8, "%lx", &val) == 1) {
</span><span class='line'>      mtest_find_page(val);
</span><span class='line'>      //my_follow_page(vma, addr);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  else if (memcmp(buf, "writeval", 8) == 0) {
</span><span class='line'>    if (sscanf(buf + 8, "%lx %lx", &val, &val2) == 2) {
</span><span class='line'>      mtest_write_val(val, val2);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  return count;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static struct file_operations proc_mtest_operations = {
</span><span class='line'>  .write = mtest_write
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static struct proc_dir_entry *mtest_proc_entry;
</span><span class='line'>//We realize all operations in the form of mode. Therefore, the function of mode initialization and quit as shown below:
</span><span class='line'>static int __init mtest_init(void)
</span><span class='line'>{
</span><span class='line'>  mtest_proc_entry = create_proc_entry("mtest", 0777, NULL);
</span><span class='line'>  if (mtest_proc_entry == NULL) {
</span><span class='line'>    printk("Error creating proc entry\n");
</span><span class='line'>    return -1;
</span><span class='line'>  }
</span><span class='line'>  printk("create the filename mtest mtest_init sucess  \n");
</span><span class='line'>  mtest_proc_entry-&gt;proc_fops = &proc_mtest_operations;
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void __exit mtest_exit(void)
</span><span class='line'>{
</span><span class='line'>  printk("exit the module......mtest_exit \n");
</span><span class='line'>  remove_proc_entry("mtest", NULL);
</span><span class='line'>}
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>MODULE_DESCRIPTION("mtest");
</span><span class='line'>MODULE_AUTHOR("Zou Nan hai");
</span><span class='line'>module_init(mtest_init);
</span><span class='line'>module_exit(mtest_exit);</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>转载链接: <a href="http://www.kerneltravel.net/?p=450">http://www.kerneltravel.net/?p=450</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Window 7配置octopress]]></title>
    <link href="http://zylia.github.io/blog/2015/03/14/test/"/>
    <updated>2015-03-14T14:23:07+08:00</updated>
    <id>http://zylia.github.io/blog/2015/03/14/test</id>
    <content type="html"><![CDATA[<p>受一位同仁经常用octopress写博客的启发，我也准备搭个博客。</p>

<p>我的安装环境是Window 7 32位系统，需要事先下载的软件有：</p>

<!-- more -->


<p><font size=2>
1) Git: <a href="http://msysgit.googlecode.com/files/Git-1.8.1.2-preview20130201.exe">http://msysgit.googlecode.com/files/Git-1.8.1.2-preview20130201.exe</a></p>

<p>2) Ruby: <a href="http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p551.exe">http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-1.9.3-p551.exe</a></p>

<p>3) DevKit: <a href="http://dl.bintray.com/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">http://dl.bintray.com/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</a></p>

<p>4) Python: <a href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi">http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi</a></p>

<p>5) easy_install: <a href="https://bootstrap.pypa.io/ez_setup.py">https://bootstrap.pypa.io/ez_setup.py</a></font></p>

<p>经过测试，这些软件版本可以安装成功。</p>

<h2>安装</h2>

<p><strong>安装Git</strong></p>

<p>一路next就可以。</p>

<p><strong>安装Ruby</strong></p>

<p>也是一路next，记得勾选&#8221;Add Ruby executables to your PATH&#8221;，将Ruby的执行变量加入到环境变量中。</p>

<p><strong>安装DevKit</strong></p>

<p>DevKit是一个自解压文件，建议解压到D:/DevKit，需要注意解压目录中没有中文和空格。解压DevKit后，在命令行输入以下命令来安装：</p>

<p><code>d:</code>  <br />
<code>cd DevKit</code>  <br />
<code>ruby dk.rb init</code>  <br />
<code>ruby dk.rb install</code></p>

<p><strong>安装Python</strong></p>

<p>也是一路next就可以。</p>

<p><strong>安装easy_install</strong></p>

<p>在Python中安装第三方库需要使用easy_install。我们用之前下载的ez_setup.py脚本来下载和安装easy_install。easy_install会安装在Python安装目录的Scripts目录中，需要将easy_install的安装目录(例如C:\Python27\Scripts)加入到环境变量中才能在命令行中使用easy_install命令。</p>

<p>Pygments模块用来使博客的代码高亮，我们在命令提示符中输入以下命令安装Pygments:</p>

<p><code>easy_install pygments</code></p>

<p><strong>安装octopress</strong></p>

<p>在GitBash中输入如下命令将octopress下载到本地：</p>

<p><code>cd d:/GitProject</code></p>

<p><code>git clone git://github.com/imathis/octopress.git octopress</code></p>

<p>在使用git clone命令时，github会自动在本地建立master分支，在后面我们将会建立source分支专门保存博客代码。</p>

<p>然后需要安装octopress的依赖项，安装依赖项需要用到Ruby的gem。由于国外的ruby站点经常会被屏蔽，我们使用国内的淘宝镜像作为gem的更新源：</p>

<p><code>gem sources -r https://rubygems.org/</code></p>

<p><code>gem sources -a http://ruby.taobao.org/</code></p>

<p><code>gem sources -l</code></p>

<p>我们会看到只有淘宝的链接。</p>

<p>修改octopress目录下的Gemfile文件，将第一行的<code>https://rubygems.org/</code>修改为<code>http://ruby.taobao.org/</code></p>

<p>在命令提示符中进入到octopress目录，输入下面命令安装依赖项</p>

<p><code>gem install bundler</code></p>

<p><code>bundle install</code></p>

<p>输入下面命令安装octopress的默认主题</p>

<p><code>rake install</code></p>

<p>到此所有安装工作已经结束，输入下面命令:</p>

<p><code>rake preview</code></p>

<p>然后在浏览器中输入地址<a href="http://localhost:4000">http://localhost:4000</a></p>

<p>就可以本地预览效果。</p>

<h2>解决中文问题</h2>

<p>需要在系统中加入如下环境变量：</p>

<p>LANG=zh_CN.UTF-8</p>

<p>LC_ALL=zh_CN.UTF-8</p>

<h2>在octopress中添加文章</h2>

<p>在命令提示符中进入octopress的安装目录，输入如下命令新建文章：</p>

<p><code>rake new_post['new article']</code></p>

<p>生成的文件存在source/_posts目录中。</p>

<p>每次添加了新的博客文章后，需要执行下面命令才重新生成</p>

<p><code>rake generate</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的新家]]></title>
    <link href="http://zylia.github.io/blog/2015/03/14/new-home/"/>
    <updated>2015-03-14T14:03:41+08:00</updated>
    <id>http://zylia.github.io/blog/2015/03/14/new-home</id>
    <content type="html"><![CDATA[<p>这是我的新家，欢迎大家多踩踩。</p>
]]></content>
  </entry>
  
</feed>
